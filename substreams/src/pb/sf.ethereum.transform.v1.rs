// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CombinedFilter {
    #[prost(message, repeated, tag="1")]
    pub log_filters: ::prost::alloc::vec::Vec<LogFilter>,
    #[prost(message, repeated, tag="2")]
    pub call_filters: ::prost::alloc::vec::Vec<CallToFilter>,
    #[prost(bool, tag="3")]
    pub send_all_block_headers: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiLogFilter {
    #[prost(message, repeated, tag="1")]
    pub log_filters: ::prost::alloc::vec::Vec<LogFilter>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogFilter {
    #[prost(bytes="vec", repeated, tag="1")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub event_signatures: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiCallToFilter {
    #[prost(message, repeated, tag="1")]
    pub call_filters: ::prost::alloc::vec::Vec<CallToFilter>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallToFilter {
    #[prost(bytes="vec", repeated, tag="1")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub signatures: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeaderOnly {
}
// @@protoc_insertion_point(module)
